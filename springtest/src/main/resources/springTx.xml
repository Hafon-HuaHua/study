<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:aop="http://www.springframework.org/schema/aop"
	    xmlns:context="http://www.springframework.org/schema/context"
		xmlns:tx="http://www.springframework.org/schema/tx"
		xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans-2.0.xsd
				http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop-2.5.xsd
				http://www.springframework.org/schema/tx https://www.springframework.org/schema/tx/spring-tx-2.5.xsd
				http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context-2.5.xsd">
	<!-- 定义PropertyPlaceHolder用于解析属性文件中的属性值来替换当前配置文件中的占位符 -->
	<context:property-placeholder location="db.properties" />
	<!-- 用于解决目标方法不支持事务，然后目标方法调用支持事务的方法，如果事务方法抛异常事务不会起作用的问题 -->
	<!-- 通过在目标方法上获取当前代理，通过代理调事务方法就会起作用 -->
	<aop:aspectj-autoproxy expose-proxy="true" />
	<bean id="user" class="com.spring.demo.po.User" />
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<bean id="userDaoImpl" class="com.spring.demo.dao.impl.UserDaoImpl">
		<property name="jdbcTemplate" ref="jdbcTemplate"/>
	</bean>
	<bean id="userServiceImpl" class="com.spring.demo.service.impl.UserServiceImpl">
		<property name="userDao" ref="userDaoImpl" />
	</bean>
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName">
			<value>${jdbc.driverClass}</value>
		</property>
		<property name="url">
			<value>${jdbc.url}</value>
		</property>
		<property name="username">
			<value>${jdbc.userName}</value>
		</property>
		<property name="password">
			<value>${jdbc.password}</value>
		</property>
	</bean>
	<!-- 定义事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	<!-- aop相关配置 -->
	<aop:config>
		<!-- 配置切入点 -->
		<aop:pointcut id="myPointCut" expression="execution(* com.spring.demo.service.impl.*.*(..))"/>
		<!-- 配置advisor用于执行通知拦截 -->
		<aop:advisor advice-ref="myAdvice" pointcut-ref="myPointCut" />
	</aop:config>
	<!-- 定义通知，用于在创建advisor时注入advice属性 -->
	<tx:advice id="myAdvice" transaction-manager="transactionManager">
		<!-- 定义要拦截的方法属性 -->
		<tx:attributes>
<!--			<tx:method name="*" propagation="REQUIRED"/>-->
			<tx:method name="insert*" propagation="REQUIRED"/>
		</tx:attributes>
	</tx:advice>
</beans>
